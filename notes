linux commands and switches
  - cat
  - ctrl +p
    -(up arrow)
  - ctrl +n
    -(down arrow)
  - alt +f
  - alt +b 
  - history
    -your commands 
  - ctrl +r 
  - man
    (/keyword)
  - pwd
 - touch
  -(creates a file)
  -t (time)
 - mkdir 
  -(directorys)
 - rmdir -p 
 - ln -s (symbolic link) 
 - ln <filename> <secondfile> (hard link) like cp 
 -find . -name 
 - find -iname (makes it case insensitive) 
 - find  -inum (inode) 
 - 2> /dev/null (the void) 
 find -size 0 or -empty 
 - find / -user studemt
 - find / -maxdepth 2
find .-(A|C|Mtime)
find / -executable ! -type d 
find /var/log -type -d -iname *.log -exec ls -la {} \; 2> /dev/null
find /var/log -iname *.log -exec ls -la {} 2> /dev/null \;
find /var/log -iname *.log 2> /dev/null -printf "%i %f\n" (%i = inodes and %f = filename) 
find / -inum 999 
touch /tmp/find {1..10}  (creates 10 files) 
touch file{1..10}.txt
egrep [regex] 
egrep -o /home.*/
cat /etc/passwd | grep -n home 
grep -v /bin/bash (everything that doesnt unclude that) 
grep -C3 'sys' /etc/passwd -C(context) -A (after) -B (before)
ps -u student -u(user) --forest(parent child format)
kill -9 <pid> -9(forcfully) -HUP(kill and restart)
cut -d: (diliminator) -f1 (-f is index position) (default is the tab key) -c (shows characters)
cut -d- -f1- -s (-s only the stuff that contain the delimenter) --complement (everything before the delemeter)
|(takeing out putand putting it in another commmand) !(Not) &(background) ; (multi commands on the same line) && (and) ||(or) (chainging operators)
> (create) >> (append) 2> (standard error)




EXAMPLES: 


1) Copy all files in the $HOME/1123 directory, that end in ".txt", and omit files containing a tilde "~" character, to directory $HOME/CUT.

Use only the find and cp commands. You will need to utilize the -exec option on find to accomplish this activity.

The find command uses BOOLEAN "!" to designate that it does not want to find any files or directories that follows.

ANSWER: 
      find $HOME/1123/ -type f -name '*.txt' ! -name '*~.txt' -exec cp {} $HOME/1123 $HOME/CUT \;





2) Using only the ls -l and cut Commands, write a BASH script that shows all filenames with extensions ie: 1.txt, etc., but no directories, in $HOME/CUT.
 
Write those to a text file called names in $HOME/CUT directory.

Omit the names filename from your output.


ANSWER: 

ls -p $HOME/CUT | grep -v "/$"| grep -v "names" > $HOME/CUT/names


3)Brace expansion is a mechanism by which arbitrary strings may be generated, for commands that will take multiple arguements.

answer:
mkdir $home {1123,1134,1145,1156}


4) As we learned, the following example would create five files with one command.

answer:
touch $HOME/1123/{1..5}.txt; touch $HOME/1123/{6..9}~.txt

5)Using the find command, list all files in $HOME/1123 that end in .txt.

answer:
find $HOME/1123 -type f -name '*.txt'

6) list all files in $HOME/1123 that end in .txt. Omit the files containing a tilde (~) character.

answer: 
find $HOME/1123/ -type f -name '*.txt' ! -name '*~.txt'


7)Using ONLY the find command, find all empty files/directories in directory /var and print out ONLY the filename (not absolute path), and the inode number, separated by newlines


answer:
find /var -empty -printf "%i %f\n"

8)  Using only the ls -l and cut Commands, write a BASH script that shows all filenames with extensions ie: 1.txt, etc., but no directories, in $HOME/CUT.
    Write those to a text file called names in $HOME/CUT directory.
    Omit the names filename from your output.


answer:
ls -p $HOME/CUT | grep -v "/$"| grep -v "names" > $HOME/CUT/names


