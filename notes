linux commands and switches
  - cat
  - ctrl +p
    -(up arrow)
  - ctrl +n
    -(down arrow)
  - alt +f
  - alt +b 
  - history
    -your commands 
  - ctrl +r 
  - man
    (/keyword)
  - pwd
 - touch
  -(creates a file)
  -t (time)
 - mkdir 
  -p(directorys)

 - rmdir -p 

 - ln -s (symbolic link) 
 - ln <filename> <secondfile> (hard link) like cp 

 -find . -name 
 - find -iname (makes it case insensitive) 
 - find  -inum (inode) 
 - 2> /dev/null (the void) 
 find -size 0 or -empty 
 - find / -user studemt
 - find / -maxdepth 2
find .-(A|C|Mtime)
find / -executable ! -type d 
find /var/log -type -d -iname *.log -exec ls -la {} \; 2> /dev/null
find /var/log -iname *.log -exec ls -la {} 2> /dev/null \;
find /var/log -iname *.log 2> /dev/null -printf "%i %f\n" (%i = inodes and %f = filename) 
find / -inum 999 

touch /tmp/find {1..10}  (creates 10 files) 
touch file{1..10}.txt

egrep [regex] 
egrep -o /home.*/
cat /etc/passwd | grep -n home 

grep -v /bin/bash (everything that doesnt unclude that) 
grep -C3 'sys' /etc/passwd -C(context) -A (after) -B (before)

ps -u student -u(user) --forest(parent child format)

kill -9 <pid> -9(forcfully) -HUP(kill and restart)

cut -d: (diliminator) -f1 (-f is index position) (default is the tab key) -c (shows characters)
cut -d- -f1- -s (-s only the stuff that contain the delimenter) --complement (everything before the delemeter)

|(takeing out putand putting it in another commmand) !(Not) &(background) ; (multi commands on the same line) && (and) ||(or) (chainging operators) \(splits multiple commands on multi lines) {} (brace expantion)
> (create) >> (append) 2> (standard error)

awk -Fn
( -F delemeter) '{print $NF}' ($NF last field no matter what) ('BEGIN{OFS='#'} CHANGES THE DELIMITER)
awk -v myvar=$(sed 's/root/grootg' $HOME/passwd -f:'{OFS=":"}{$1=myvar;print}'}

command substisitution:
Example: A=$(cat/etc/passwd) Executed when echoed(echo $A)
         B='cat /ect/passwd' (execute when typed ($B))

sed 's/home/nobodyhome/g' passwd (g = global, s = substitute)
sed 's/\/bin\/bash/\/been\/better/g' sed passwd
sed '/home/d' passwd
sed -e'/xrdp/d' -e '/telnetd/d' passwd

cat sort.txt | awk -F: '{print $1}' | sort -u (-n sorting baised on numbers) (-u sorting a file with only one instance if therer is more than one) 
cat sort.txt | awk -F: '{print $1}' | sort | uniq -c 

alias <nam>='command'
alias -p (all aliases)

md5dsum


paramiter                                                            functions
____________________________________________________________________________________________________________________________________________________________________________________________________
var=123                                                              hello_wordld(){
                                                                       <code block>
                                                                      }
be==234
$ =a+b
$#number id ares added
$0 = script namee
$* = arguments passed 
$? = see if the last command ran
$_ = prints the previous == line 
$$ = pid 
$- = flags 
$! = backround job 



<function>()
{
<code body>
}
call upon the function

Loops
_____________________________________________________________________________________________________________________________________________________________________________________________________
for x in {1..10}; do         for x in $(cat <filename>);do 
<code Block>                 <code block> 
done                         done

for x in $(cat /etc/passwd | awk -F: '{print $1}')
    do echo $x 
    done 


x=0
while[[ $x -le 10 ]]    (break is in the while statements) 
do echo $x
   x=$(($x+1))
done 

if [[ <condition> ]]
then 
  <code block> 
fi 

ip route 
which 
tar
zip 























EXAMPLES: 


1) Copy all files in the $HOME/1123 directory, that end in ".txt", and omit files containing a tilde "~" character, to directory $HOME/CUT.

Use only the find and cp commands. You will need to utilize the -exec option on find to accomplish this activity.

The find command uses BOOLEAN "!" to designate that it does not want to find any files or directories that follows.

ANSWER: 
      find $HOME/1123/ -type f -name '*.txt' ! -name '*~.txt' -exec cp {} $HOME/1123 $HOME/CUT \;





2) Using only the ls -l and cut Commands, write a BASH script that shows all filenames with extensions ie: 1.txt, etc., but no directories, in $HOME/CUT.
 
Write those to a text file called names in $HOME/CUT directory.

Omit the names filename from your output.


ANSWER: 

ls -p $HOME/CUT | grep -v "/$"| grep -v "names" > $HOME/CUT/names


3)Brace expansion is a mechanism by which arbitrary strings may be generated, for commands that will take multiple arguements.

answer:
mkdir $home {1123,1134,1145,1156}


4) As we learned, the following example would create five files with one command.

answer:
touch $HOME/1123/{1..5}.txt; touch $HOME/1123/{6..9}~.txt

5)Using the find command, list all files in $HOME/1123 that end in .txt.

answer:
find $HOME/1123 -type f -name '*.txt'

6) list all files in $HOME/1123 that end in .txt. Omit the files containing a tilde (~) character.

answer: 
find $HOME/1123/ -type f -name '*.txt' ! -name '*~.txt'


7)Using ONLY the find command, find all empty files/directories in directory /var and print out ONLY the filename (not absolute path), and the inode number, separated by newlines


answer:
find /var -empty -printf "%i %f\n"

8)  Using only the ls -l and cut Commands, write a BASH script that shows all filenames with extensions ie: 1.txt, etc., but no directories, in $HOME/CUT.
    Write those to a text file called names in $HOME/CUT directory.
    Omit the names filename from your output.


answer:
ls -l $HOME/CUT | cut -d. -f1- -s| cut -d: -f 2 | cut -d' ' -f2  > $HOME/CUT/names


Day 2 
_________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________



1) Write a basic bash script that greps ONLY the IP addresses in the text file provided (named StoryHiddenIPs in the current directory); sort them uniquely by number of times they appear.

answer: 
grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' StoryHiddenIPs |sort -n | uniq -c | sort -r


2) 
    Using ONLY the awk command, write a BASH one-liner script that extracts ONLY the names of all the system and user accounts that are not UIDs 0-3.
    Only display those that use /bin/bash as their default shell.
    The input file is named $HOME/passwd and is located in the current directory.
    Output the results to a file called $HOME/SED/names.txt

answer: 
cat $HOME/passwd | awk -F: '{if($3 > 3 && $7 == "/bin/bash") print $1}' > $HOME/SED/names.txt


3) Using ONLY sed, write all lines from $HOME/passwd into $HOME/PASS/passwd.txt that do not end with either /bin/sh or /bin/false.

answer: 
cat $HOME/passwd | sed -e '/\/bin\/sh/d' -e '/\/bin\/false/d' > $HOME/PASS/passwd.txt

4) 
    Find all dmesg kernel messages that contain CPU or BIOS (uppercase) in the string, but not usable or reserved (case-insensitive)
    Print only the msg itself, omitting the bracketed numerical expressions ie: [1.132775]

Answer: 
dmesg | grep 'CPU\|BIOS' | cut -d] -f2- | grep -v 'usable\|reserved'

5) 

    Write a Bash script using "Command Substitution" to replace all passwords, using openssl, from the file $HOME/PASS/shadow.txt with the MD5 encrypted password: Password1234, with salt: bad4u
    Output of this command should go to the screen/standard output.
    You are not limited to a particular command, however you must use openssl. Type man openssl passwd for more information.

answer:

a=$(openssl passwd -1 -salt bad4u Password1234)
awk -F: -v "awk_var=$a" 'BEGIN {OFS=":"} {$2=awk_var} {print $0}' $HOME/PASS/shadow.txt
_________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

Day 3 
1) 
    Using find, find all files under the $HOME directory with a .bin extension ONLY.
    Once the file(s) and their path(s) have been found, remove the file name from the absolute path output.
    Ensure there is no trailing / at the end of the directory path when outputting to standard output.
    You may need to sort the output depending on the command(s) you use. Have each path displayed only once.


Answer: 
find $HOME -type f -name "*.bin" -exec dirname {} \; | sort -u 

2) 

    Find all executable files under the following four directories:
        /bin
        /sbin
        /usr/bin
        /usr/sbin
    Sort the filenames with absolute path, and get the md5sum of the 10th file from the top of the list.

answer: 
a=$(find /bin /sbin /usr/bin /usr/sbin -type f -executable | sort | head -10 | tail -1)
md5sum $a | cut -d' ' -f1


3) 
    Write a script which will copy the last entry/line in the passwd-like file specified by the $1 positional parameter
    Modify the copied line to change:
        User name to the value specified by $2 positional parameter
        Used id and group id to the value specified by $3 positional parameter
        Home directory to a directory matching the user name specified by $2 positional parameter under the /home directory (i.e. if the $2 was 'Chris', the new line would have /home/Chris as its home directory)
        The default shell to `/bin/bash'
    Append the modified line to the end of the file

answer:
tail -1 $1 | awk -F: -v "name=$2" -v "id=$3" 'BEGIN {OFS=":"} {$1=name} {$3=id} {$4=id} {$6="/home/"name} {$NF="/bin/bash"}{print $0}' >> $1

4) 
    Sort the /etc/passwd file numerically by the GID field.
    For the 10th entry in the sorted passwd file, get an md5 hash of that entryâ€™s home directory.
    Output ONLY the MD5 hash of the directory's name to standard output.

Answer:
cat /etc/passwd | sort -n -t':' -k4 | head -10 | tail -1 | awk -F: '{print $6}' | md5sum | rev | cut -c4- | rev




5) 

    Write a script which will find and hash the contents 3 levels deep from each of these directories: /bin /etc /var
    Your script should:
        Exclude file type named pipes. These can break your script.
        Redirect STDOUT and STDERR to separate files.
        Determine the count of files hashed in the file with hashes.
        Determine the count of unsuccessfully hashed directories.
        Have both counts output to the screen with an appropriate title for each count.
Answer: 
a=$(find /etc /var /bin -maxdepth 3 ! -type p -exec md5sum {} \; > $HOME/goodhash 2>$HOME/badhash ;)
b=$(cat goodhash | wc -l)
c=$(cat $HOME/badhash | grep -v "Permission denied" | wc -l)
echo "Successfully Hashed Files: "$b
echo "Unsuccessfully Hashed Directories: "$c


Day 4 
_____________________________________________________________________________________________________________________________________________________________________


1) 
Design a script that detects the existence of directory: $HOME/.ssh

    Upon successful detection, copies any and all files from within the directory $HOME/.ssh to directory $HOME/SSH and produce no output. You will need to create $HOME/SSH.
    Upon un-successful detection, displays the error message "Run ssh-keygen" to the user.

answer: 
#!/bin/bash 
mkdir $HOME/SSH
cd $HOME/.ssh
if [[ -d $HOME/.ssh ]] 
then 
   cp -r $HOME/.ssh/* $HOME/SSH
else
    echo "Run ssh-keygen"
fi

2) 

    Write a script that determines your default gateway ip address. Assign that address to a variable using command substitution.
        NOTE: Networking on the CTFd is limited for security reasons. ip route and route are emulated. Use either of those with no arguments/switches.
    Have your script determine the absolute path of the ping application. Assign the absolute path to a variable using command substitution. HINT: man which
    Have your script send six ping packets to your default gateway, utilizing the path discovered in the previous step, and assign the response to a variable using command substitution.
    Evaluate the response as being either successful or failure, and print an appropriate message to the screen.

answer: 

B=$(ip route |grep default | cut -d' ' -f3 )
A=$(which ping)
C=$($A -c 6 $B 1> help.txt)
D=$(cat help.txt | grep ' 6 received')
if [[ $? == 0 ]]; then
   echo successful;
else
   echo failure;
fi


3) 

    Create the following files in a new directory you create $HOME/ZIP:
        file1 will contain the md5sum of the text 12345
        file2 will contain the md5sum of the text 6789
        file3 will contain the md5sum of the text abcdef
    Create a zip file containing the three files above, without being stored inside a directory in the zip file. Name the zip file $HOME/ZIP/file.zip
        HINT: "Junk" the paths
    Utilize tar on $HOME/ZIP/file.zip to archive it into a file called $HOME/ZIP/file.tar.gz which should not include directories. Use the gzip option in tar, DO NOT use a seperate gzip binary.
        HINT: You might need an option to change directories first.

answer: 
mkdir $HOME/ZIP

echo "12345" | md5sum | awk -F' ' '{print$1}' > $HOME/ZIP/file1
echo "6789" | md5sum | awk -F' ' '{print$1}' > $HOME/ZIP/file2
echo "abcdef" | md5sum | awk -F' ' '{print$1}' > $HOME/ZIP/file3

zip -rj file.zip $HOME/ZIP
tar -czf $HOME/ZIP/file.tar.gz file.zip




4) 

Utilize Bash looping to iteratively create each user account and their directories.

    Design a basic FOR Loop that iteratively alters the file system and user entries in a passwd-like file for new users: LARRY, CURLY, and MOE.
    Each user should have an entry in the $HOME/passwd file
    The userid and groupid will be the same and can be found as the sole contents of a file with the user's name in the $HOME directory (i.e. $HOME/LARRY.txt might contain 123)
    The home directory will be a directory with the user's name located under the $HOME directory (i.e. $HOME/LARRY)
        NOTE: Do NOT use shell expansion when specifying this in the $HOME/passwd file.
    The default shell will be /bin/bash
    The other fields in the new entries should match root's entry
    Users should be created in the order specified

answer: 
rootline=$(head -1 $HOME/passwd)
for x in {LARRY,CURLY,MOE}; 
do 
   myuid=$(cat $HOME/$x.txt)
   mkdir $HOME/$x
   echo "$rootline" | awk -F: -v user=$x -v uid=$myuid 'BEGIN{OFS=":"} {$1=user;$3=uid;$4=uid;$6="$HOME/"user}{print $0}' >> $HOME/passwd
done




5) 



    Write a bash script that will find all the files in the /etc directory, and obtains the octal permission of those files. The stat command will be useful for this task.
    Depending how you go about your script, you may find writing to the local directory useful. What you must seperate out from the initial results are the octal permissions of 0-640 and those equal to and greater than 642, ie 0-640 goes to low.txt, while 642 is sent to high.txt.
    Have your script uniquely sort the contents of the two files by count, numerically-reversed, and output the results, with applicable titles, to the screen. An example of the desired output is shown below.
        NOTE: There is a blank line being printed between the two sections of the output below.


answer: 

find /etc -type f -exec stat -c "%a" {} \; 2> /dev/null > $HOME/source 
for x in $(cat $HOME/source); 
do 
    if [[ $x -le 640 ]]; then
    echo \"$x\"  >>  $HOME/less 
    elif [[ $x -ge 642 ]]; then  
    echo \"$x\" >> $HOME/more
    fi 
done
echo 'Files w/ OCTAL Perm Values 642+:'
cat $HOME/more | sort | uniq -c | sort -nr 
ehco 
echo 'Files w/ OCTAL Perm Values 0-640:'
echo cat $HOME/less | sort | uniq -c | sort -nr 






